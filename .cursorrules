# Owlgorithm Development Rules

## üìù Conventional Commits (REQUIRED)

This project uses Conventional Commits for clear history and automatic changelog generation.

### Commit Message Format:
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Required Types:
- `feat`: New features or enhancements
- `fix`: Bug fixes and error corrections  
- `docs`: Documentation updates
- `chore`: Maintenance, dependencies, configuration
- `test`: Adding or updating tests
- `refactor`: Code improvements without behavior changes
- `perf`: Performance optimizations
- `ci`: CI/CD pipeline changes

### Optional Scopes:
- `core`: Core tracking logic (`src/core/`)
- `scrapers`: Web scraping functionality (`src/scrapers/`)
- `notifiers`: Notification systems (`src/notifiers/`)
- `config`: Configuration management (`config/`)
- `setup`: Setup and installation (`scripts/setup*`)
- `docs`: Documentation files

### Examples:
```bash
feat: add ntfy notification backend support
feat(notifiers): implement email notification fallback
fix: resolve Firefox automation timeout issues
fix(scraper): handle missing session data gracefully
docs: update README with troubleshooting section
docs(setup): add cross-platform installation guide
chore: bump selenium to latest version
chore(config): migrate to new template format
test: add unit tests for metrics calculator
refactor(core): extract calculation utilities to separate module
perf: optimize data processing pipeline
```

## üè∑Ô∏è Version Management: User Impact Threshold Approach

**Core Principle**: Version when users would care, not by calendar or commit count.

### **AI Agent Decision Framework**

#### **Before Suggesting Version Bumps, Apply "Would I Update?" Test:**
- **Yes, definitely** ‚Üí MINOR or MAJOR bump
- **Yes, if it's easy** ‚Üí PATCH bump  
- **Meh, not really** ‚Üí Keep working, accumulate more changes

#### **Version Bump Triggers (‚úÖ DO):**
- Completed a user-facing feature (however small)
- Fixed a bug that impacts user experience  
- Made setup/configuration easier
- Added documentation that changes user workflow
- Accumulated 3-5+ small improvements that add up
- About to start risky work (lock in stable state)
- Made a breaking change (immediate MAJOR bump required)

#### **DON'T Version For (‚ùå AVOID):**
- Internal refactoring with no user impact
- Work-in-progress commits  
- Dependency updates (unless user-visible)
- Code style/formatting changes
- Comment typo fixes
- Single-line development fixes

### **Version Bumping Rules:**
- **MAJOR** (`X.0.0`): Breaking changes, config schema changes, API changes
- **MINOR** (`x.Y.0`): New features, enhancements, backward-compatible additions
- **PATCH** (`x.y.Z`): Bug fixes, documentation, small improvements

### **Required Actions for Version Bumps:**
1. **Apply "Would I Update?" test** - Ensure user value exists
2. **Update VERSION file**: `echo "2.1.0" > VERSION` 
3. **Update CHANGELOG.md**: Add user-focused entries (not implementation details)
4. **Use conventional commit**: Include version bump rationale

### **Version Bump Examples:**
```bash
# MAJOR version bump (breaking changes)
chore: bump version to 3.0.0 - migrate launchd to cron (BREAKING CHANGE)

# MINOR version bump (new features)  
chore: bump version to 2.1.0 - email notifications support

# PATCH version bump (fixes/improvements)
chore: bump version to 2.0.1 - better error messages and M1 Mac support
```

### **Changelog Writing Rules for AI Agents:**
- **Focus on user impact**, not implementation details
- **Group by user benefits**: What problems does this solve?
- **Use plain language**: Avoid technical jargon
- **Lead with value**: Why users should care about this change

```markdown
# Good (user-focused):
### Added
- Email notifications as Pushover alternative
- Dry-run mode for safe testing

### Fixed
- Setup now works correctly on M1 Macs
- Clearer error messages when dependencies missing

# Bad (implementation-focused):
### Added  
- SMTP client class with TLS support
- --dry-run flag in ArgumentParser

### Fixed
- Architecture detection in subprocess calls
- ImportError exception handling
```

**DO NOT suggest version bumps without clear user value!**

## üö® Critical Business Rules (READ FIRST)

Before making ANY changes, read `docs/core-business-logic.md`. These rules are immutable:

- **ALL XP sessions count as lessons** (no exceptions)
- **Only raw modal data from duome.eu is trusted**
- **Tracking-only data model** (excludes historical pre-2025-06-23)
- **Hardcoded daily goal prevents calculation bugs**

## üèóÔ∏è Architecture Guidelines

### File Organization:
- `src/core/`: Business logic and calculations
- `src/scrapers/`: Web scraping with Selenium
- `src/notifiers/`: Push notification systems
- `src/utils/`: Shared utilities and helpers
- `config/`: Configuration templates and user settings
- `scripts/`: Setup, automation, and maintenance scripts

### Code Quality:
- Keep functions focused and single-purpose
- Use descriptive variable names
- Add docstrings to all public functions
- Prefer explicit imports over wildcards
- Test changes with `python scripts/daily_update.py`

### Testing Requirements ‚ö†Ô∏è **MANDATORY**:

#### **AI Agent Testing Protocol (MUST FOLLOW):**
- ‚úÖ **ALWAYS** run `make test-smoke` before ANY commit to `src/` or `scripts/`
- ‚úÖ **NEVER** commit if tests fail - fix issues first
- ‚úÖ **ALWAYS** report test results in commit messages
- ‚úÖ Run tests before suggesting version bumps

#### **Test Commands:**
```bash
make test-smoke      # MANDATORY - Essential smoke tests (< 30 seconds)
make test-unit       # Unit tests only
make test-all        # Complete test suite
```

#### **Commit Workflow Example:**
```bash
# 1. Make changes to src/ or scripts/
# 2. MANDATORY: Run smoke tests
make test-smoke
# 3. If ‚úÖ passed, proceed with commit including test results:
git commit -m "fix(core): improve calculation accuracy

- Fixed edge case in lesson counting
- Smoke tests: ‚úÖ Passed (0.4s)
- No breaking changes"
```

#### **Failure Protocol:**
- If `make test-smoke` fails ‚Üí DO NOT commit
- Fix the issue first, then re-run tests
- Only proceed when tests pass completely

#### **Additional Testing:**
- Test any scraper changes with `--validate-headless`
- Verify notifications work before committing
- Run full E2E test after architecture changes
- Check automation works: `python scripts/setup_cron.py status`

## üîß Configuration Management

### Template Pattern (DO NOT BREAK):
```
config/app_config.example.py  # Template (committed)
config/app_config.py         # User copy (gitignored)
```

- Never commit personal `app_config.py`
- Always update `app_config.example.py` for new fields
- Preserve backward compatibility in config schema
- Document config changes in CHANGELOG.md

## üì¶ Dependencies

### Preferred Approach:
- Minimal dependencies (avoid bloat)
- Prefer stdlib when possible
- Pin major versions in `requirements.txt`
- Test new dependencies on multiple platforms

### Core Dependencies (DO NOT REMOVE):
- `selenium`: Web automation (Firefox only)
- `requests`: HTTP client for notifications
- `beautifulsoup4`: HTML parsing
- `pandas`: Data manipulation (if needed)

## üöÄ Release Process

### Version Bumping:
1. Apply "Would I Update?" test to accumulated changes
2. Update `VERSION` file with semantic versioning
3. Update `CHANGELOG.md` with user-focused entries
4. Commit with: `chore: bump version to X.Y.Z - [user benefit summary]`
5. Test full workflow before proceeding

### Quality Gates Before Version Bump:
- [ ] Can I explain why users would want this version in one sentence?
- [ ] Does the changelog read like "user benefits" not "code changes"?
- [ ] Are breaking changes clearly highlighted with migration notes?
- [ ] Has the system been tested end-to-end recently?

## üí° Best Practices

### Commit Frequency:
- Small, atomic commits are preferred
- One logical change per commit
- Commit working increments, not broken code
- Use meaningful commit messages (follow conventional commits)

### Error Handling:
- Always handle browser automation failures gracefully
- Log errors with context for debugging
- Provide helpful error messages to users
- Never crash on missing optional dependencies

### Performance:
- Profile scraper performance changes
- Avoid unnecessary data processing
- Cache expensive operations when safe
- Respect duome.eu rate limits

## üîç Code Review Checklist

Before committing, verify:
- [ ] Conventional commit message format
- [ ] No personal data in committed files
- [ ] Config template updated if schema changed
- [ ] Documentation updated for user-facing changes
- [ ] Tests pass (manual E2E test minimum)
- [ ] Error handling for new failure modes
- [ ] Backward compatibility maintained
- [ ] Performance impact considered 
- [ ] If user-facing changes exist, consider version bump using "Would I Update?" test 